pipeline {
    agent {
        docker {
            image 'prajwal1209/docker-agent:v1.13'
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root' // So docker commands inside agent can access host docker
        }
    }

    environment {
        IMAGE_NAME = "prajwal1209/demoeventmanagerworker"
        IMAGE_TAG = "v1.${BUILD_NUMBER}"
        KUBE_CONFIG = credentials('kubeconfig') // Jenkins credentials ID for kubeconfig file
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds' // Jenkins DockerHub credentials ID
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Build from correct context and Dockerfile path
                    sh """
                        export DOCKER_BUILDKIT=0
                        docker build -f EventManagerWorker/Dockerfile -t ${IMAGE_NAME}:${IMAGE_TAG} EventManagerWorker
                    """
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    dir('EventManagerWorker') {
                        sh '''
                            export KUBECONFIG=$KUBECONFIG_FILE
                            # Replace image tag in deployment file before applying
                            sed -i "s|IMAGE_PLACEHOLDER|${IMAGE_NAME}:${IMAGE_TAG}|g" deployment.yml
                            kubectl apply -f deployment.yml --namespace=democode
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
